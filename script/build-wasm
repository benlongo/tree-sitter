#!/usr/bin/env bash

usage() {
  cat <<EOF
USAGE

  $0 [--help] [--debug] [--docker]

SUMMARY

  Compile the Tree-sitter WASM library. This will create two files in the
  \`lib/binding_web/build-wasm\` directory: \`tree-sitter-c.js\` and 
  \`tree-sitter.wasm\`.

REQUIREMENTS

  You must have either the \`emcc\` command or the \`docker\` command
  on your PATH for this to work.

OPTIONS

  --help:   Display this message.
  --debug:  Compile the library more quickly, with fewer optimizations
            and more runtime assertions.
  --docker: Run emscripten using docker, even if \`emcc\` is installed.
            By default, \`emcc\` will be run directly when available.

EOF
}

set -e

web_dir=lib/binding_web
src_dir="$web_dir/src/wasm-binding"
exports=$(cat ${src_dir}/exports.json)
runtime_exports=$(cat ${src_dir}/runtime-exports.json)
emscripten_flags="-O3"
force_docker=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    --debug)
      emscripten_flags="-s ASSERTIONS=1 -s SAFE_HEAP=1 -O0"
      ;;

    --help)
      usage
      exit 0
      ;;

    --docker)
      force_docker=1
      ;;

    *)
      usage
      echo "Unrecognized argument '$1'"
      exit 1
      ;;
  esac
  shift
done

emcc=
if which emcc > /dev/null && [[ "$force_docker" == "0" ]]; then
  emcc=emcc
elif which docker > /dev/null; then
  emcc="docker run               \
    --rm                         \
    -v $(pwd):/src:Z             \
    -u $(id -u)                  \
    trzeci/emscripten-slim       \
    emcc"
else
  echo 'You must have either `docker` or `emcc` on your PATH to run this script'
  exit 1
fi

mkdir -p target/scratch

# Use emscripten to generate `tree-sitter.js` and `tree-sitter.wasm`
# in the `target/scratch` directory
$emcc                                \
  -s WASM=1                          \
  -s TOTAL_MEMORY=33554432           \
  -s ALLOW_MEMORY_GROWTH=1           \
  -s MAIN_MODULE=2                   \
  -s EXPORT_ES6=1                    \
  -s MODULARIZE_INSTANCE=1           \
  -s NO_FILESYSTEM=1                 \
  -s "EXPORTED_FUNCTIONS=${exports}" \
  -s "EXTRA_EXPORTED_RUNTIME_METHODS=${runtime_exports}" \
  $emscripten_flags                  \
  -std=c99                           \
  -D 'fprintf(...)='                 \
  -D NDEBUG=                         \
  -I lib/src                         \
  -I lib/include                     \
  --js-library ${src_dir}/imports.js \
  lib/src/lib.c                      \
  ${src_dir}/binding.c               \
  -o target/scratch/tree-sitter.js

mkdir -p "$web_dir/build-wasm"
cp target/scratch/tree-sitter.js "$web_dir/build-wasm/tree-sitter-c.js"
cp target/scratch/tree-sitter.wasm "$web_dir/build-wasm/tree-sitter.wasm"

